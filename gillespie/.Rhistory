gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 7
dcounts[1,2] = 1
dcounts[2,1] = 2
dcounts[2,2] = 4
total_counts = sum(dcounts)
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:20){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 7
dcounts[1,2] = 2
dcounts[2,1] = 2
dcounts[2,2] = 7
total_counts = sum(dcounts)
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:20){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
8/18
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 3
dcounts[1,2] = 2
dcounts[2,1] = 2
dcounts[2,2] = 3
total_counts = sum(dcounts)
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:20){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
8/10
?apply
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 20
dcounts[1,2] = 10
dcounts[2,1] = 10
dcounts[2,2] = 20
total_counts = sum(dcounts)
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:20){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
rbinom(10,0.5)
rbinom(0.5,10)
?rbinom
rbinom(10,0,0.5)
rbinom(10,10,0.5)
rbinom(10,1,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
?multinom
rmultinom(1,10,c(0.25,0.25,0.25,0.25))
tst = rmultinom(1,10,c(1/4,1/4,1/4,1/4))
tst
tst[1]
tst[2]
tst[3]
tst[4]
?c
c(4)*4
rep(4,4)
rep(1/4,4)
dcounts
tst
dcounts = tst
dcounts
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 20
dcounts[1,2] = 10
dcounts[2,1] = 10
dcounts[2,2] = 20
total_counts = sum(dcounts)
counts = matrix(0,nrow=2,ncol=2)
counts
vector(counts)
as.vector(counts)
as.vector(count) = as.vector(tst)
as.vector(counts) = as.vector(tst)
tst
as.matrix(tst,nrow=2,ncol=2)
dim(tst) = c(2,2)
tst
bicat_sim = function(trials,p){
n_00 = rbinom(1,trials,p)
n_11 = trials - n_00
results_00 = rmultinom(1,n_00,rep(1/4,4))
dim(results_00) = c(2,2)
counts = results_00
results_11 = rbinom(1,n_11,1/2)
counts[1,1] = counts[1,1] + results_11
counts[2,2] = counts[2,2] + (n_11 - results_11)
return(counts)
}
bicat_sim(10,0.5)
bicat_sim(10,1)
bicat_sim(10,1)
bicat_sim(10,1)
bicat_sim(10,1)
bicat_sim(100,1)
bicat_sim(100,0.8)
bicat_EM = function(dcounts,niter){
print(dcounts)
# prob of a gene being in each group
gpi_init = matrix(0,nrow=2,ncol=2) # 'pi' probability of having a particular pattern
gpi_init[1,1] = 1/2
gpi_init[2,2] = 1/2
# we're going to simplify to two groups: incoherent and coherent between two groups
# we assume for each group, theres an equal chance of having a response in either direction
# we can maybe explicitly model a direction bias
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:20){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
return(gpi)
}
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM = function(dcounts,niter){
print(dcounts)
total_counts = sum(dcounts)
# prob of a gene being in each group
gpi_init = matrix(0,nrow=2,ncol=2) # 'pi' probability of having a particular pattern
gpi_init[1,1] = 1/2
gpi_init[2,2] = 1/2
# we're going to simplify to two groups: incoherent and coherent between two groups
# we assume for each group, theres an equal chance of having a response in either direction
# we can maybe explicitly model a direction bias
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:20){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
return(gpi)
}
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(20,0.5),20)
bicat_EM(bicat_sim(20,0.5),20)
bicat_EM(bicat_sim(20,0.5),20)
bicat_EM(bicat_sim(20,0.5),20)
bicat_EM(bicat_sim(100,0.5),20)
bicat_EM(bicat_sim(100,0.5),20)
bicat_EM(bicat_sim(100,0.5),20)
bicat_EM(bicat_sim(100,0.5),20)
bicat_EM(bicat_sim(100,0.5),20)
bicat_EM(bicat_sim(100,0.5),20)
bicat_EM(bicat_sim(1000,0.5),20)
bicat_EM(bicat_sim(1000,0.5),20)
bicat_EM(bicat_sim(1000,0.5),20)
bicat_EM(bicat_sim(1000,0.9),20)
bicat_EM(bicat_sim(1000,0.9),20)
bicat_EM(bicat_sim(1000,0.9),20)
bicat_EM(bicat_sim(1000,0.9),20)
bicat_EM(bicat_sim(1000,0.9),20)
bicat_EM(bicat_sim(1000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),100)
bicat_EM(bicat_sim(10000,0.99),100)
bicat_EM(bicat_sim(10000,0.99),100)
bicat_EM(bicat_sim(10000,0.99),100)
bicat_EM(bicat_sim(10000,0.99),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM = function(dcounts,niter){
print(dcounts)
total_counts = sum(dcounts)
# prob of a gene being in each group
gpi_init = matrix(0,nrow=2,ncol=2) # 'pi' probability of having a particular pattern
gpi_init[1,1] = 1/2
gpi_init[2,2] = 1/2
# we're going to simplify to two groups: incoherent and coherent between two groups
# we assume for each group, theres an equal chance of having a response in either direction
# we can maybe explicitly model a direction bias
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:niter){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
return(gpi)
}
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM(bicat_sim(100000,1.0),1000)
bicat_EM(bicat_sim(100000,0.8),1000)
bicat_EM(bicat_sim(100000,0.8),100)
bicat_EM(bicat_sim(100000,0.8),20)
capabilities()['cairo']
?svg
svg()
dev.off()
capabilities()['cairo']
setwd('Documents/Dinner/fly eye/stochastic/gillespie')
?read
?read.table
?readLines
?scan
scan(filename,nlines=1,sep='\t')
filename = 'results/testing.txt'
scan(filename,nlines=1,sep='\t')
scan(filename,nlines=4,sep='\t',what=list)
filename = 'results/testing.txt'
scan(filename,nlines=4,sep='\t',what=list)
scan(filename,nlines=4,sep='\t',what='list')
times = scan(filename,nlines=1,sep='\t')
times
times[-1]
times
length(times)
?file
?open
?close
con = file(filename,'r')
times = scan(con,nlines=1,sep='\t')
times = scan(con,nlines=1,sep='\t')
?scan
con = file(filename,'r')
times = scan(con,nlines=1,sep='\t')
species = scan(con,nlines=1,sep='\t')
close(con)
con = file(filename,'r')
times = scan(con,nlines=1,sep='\t')
species = scan(con,nlines=1,sep='\t',what=character())
species
con = file(filename,'r')
times = scan(con,nlines=1,sep='\t')
species = scan(con,nlines=1,sep='\t',what=character())
reactions = scan(con,nlines=1,sep='\t',what=character())
parameters = scan(con,nlines=1,sep='\t',what=character())
data = scan(con,nlines=length(times)-1,sep='\t')
close(con)
data
?read.table
con = file(filename,'r')
times = scan(con,nlines=1,sep='\t')
species = scan(con,nlines=1,sep='\t',what=character())
reactions = scan(con,nlines=1,sep='\t',what=character())
parameters = scan(con,nlines=1,sep='\t',what=character())
data = read.table(con,nlines=length(times)-1,sep='\t')
close(con)
data
con = file(filename,'r')
times = scan(con,nlines=1,sep='\t')
species = scan(con,nlines=1,sep='\t',what=character())
reactions = scan(con,nlines=1,sep='\t',what=character())
parameters = scan(con,nlines=1,sep='\t',what=character())
data = read.table(con,sep='\t')
close(con)
data
con = file(filename,'r')
times = scan(con,nlines=1,sep='\t',strip.white=TRUE)
times
?head
con = file(filename,'r')
times = head(scan(con,nlines=1,sep='\t'),-1)
times
?scan
?data.frame
?matrix
parameters
con = file(filename,'r') # open connection
# using scan to retrieve header info line by line
times = head(scan(con,nlines=1,sep='\t'),-1)
species = head(scan(con,nlines=1,sep='\t',what=character()),-1)
reactions = head(scan(con,nlines=1,sep='\t',what=character()),-1)
parameters = head(scan(con,nlines=1,sep='\t',what=character()),-1) # could be parsed out
concentrations.mat = matrix(nrow=0,ncol=length(species))
for (i in 1:length(times)) {
rdata = head(scan(con,nlines=1,sep='\t'),-1)
}
close(con)
parameters
ntrials = 3
concentrations.mat = matrix(nrow=ntrials*length(times),ncol=length(species))
concentrations.mat
con = file(filename,'r') # open connection
# using scan to retrieve header info line by line
times = head(scan(con,nlines=1,sep='\t'),-1)
species = head(scan(con,nlines=1,sep='\t',what=character()),-1)
reactions = head(scan(con,nlines=1,sep='\t',what=character()),-1)
parameters = head(scan(con,nlines=1,sep='\t',what=character()),-1) # could be parsed out
ntrials = 3
concentrations.mat = matrix(nrow=ntrials*length(times),ncol=length(species))
rxn_counts.mat = matrix(nrow=ntrials,ncol=length(reactions))
for (i in 1:ntrials) {
for (j in 1:length(times)) {
rdata = head(scan(con,nlines=1,sep='\t'),-1)
concentrations.mat[(i-1)*length(times) + j,] = rdata
}
rxndata = head(scan(con,nlines=1,sep='\t'),-1)
rxn_counts.mat[i,] = rxndata
}
close(con)
rxn_counts.mat
con = file(filename,'r') # open connection
# using scan to retrieve header info line by line
times = head(scan(con,nlines=1,sep='\t'),-1)
species = head(scan(con,nlines=1,sep='\t',what=character()),-1)
reactions = head(scan(con,nlines=1,sep='\t',what=character()),-1)
parameters = head(scan(con,nlines=1,sep='\t',what=character()),-1) # could be parsed out
ntrials = 3
concentrations.mat = matrix(nrow=ntrials*length(times),ncol=length(species))
rxn_counts.mat = matrix(nrow=ntrials,ncol=length(reactions))
for (i in 1:ntrials) {
for (j in 1:length(times)) {
rdata = head(scan(con,nlines=1,sep='\t'),-1)
concentrations.mat[(i-1)*length(times) + j,] = rdata
}
rxndata = head(scan(con,nlines=1,sep='\t'),-1)
rxn_counts.mat[i,] = rxndata
}
close(con)
rxn_counts.mat
concentrations.mat
con = file(filename,'r') # open connection
# using scan to retrieve header info line by line
times = head(scan(con,nlines=1,sep='\t'),-1)
species = head(scan(con,nlines=1,sep='\t',what=character()),-1)
reactions = head(scan(con,nlines=1,sep='\t',what=character()),-1)
parameters = head(scan(con,nlines=1,sep='\t',what=character()),-1) # could be parsed out
ntrials = 3
concentrations.mat = matrix(nrow=ntrials*length(times),ncol=length(species)+2)
colnames(concentrations.mat) = c(species,'times','trial')
rxn_counts.mat = matrix(nrow=ntrials,ncol=length(reactions))
for (i in 1:ntrials) {
for (j in 1:length(times)) {
rdata = head(scan(con,nlines=1,sep='\t'),-1)
concentrations.mat[(i-1)*length(times) + j,] = c(rdata,times[j],i)
}
rxndata = head(scan(con,nlines=1,sep='\t'),-1)
rxn_counts.mat[i,] = rxndata
}
close(con)
concentrations.mat
require(ggplot2)
qplot(concentrations.mat[,'x'],concentrations.mat[,'t'])
qplot(concentrations.mat[,'x'],concentrations.mat[,'times'])
qplot(concentrations.mat[,'times'],concentrations.mat[,'x'])
g = ggplot(data.frame(concentrations.mat),aes(times,x,col=trial))
g = g + geom_line()
g
g = ggplot(data.frame(concentrations.mat),aes(times,x,col=factor(trial)))
g = g + geom_line()
g
?ggplot
g = ggplot(data.frame(concentrations.mat),aes(times,x,group=factor(trial)))
g = g + geom_line()
g
?melt
melt(concentrations.mat)
require(reshape2)
melt(concentrations.mat)
conc.mlt = melt(concentrations.mat,id=c('times','trial'))
conc.mlt
conc.mlt = melt(concentrations.mat,id=c('times','trial'))
conc.mlt
conc.mlt = melt(concentrations.mat,id.vars=c('times','trial'))
conc.mlt
concentrations.mat
?melt
require(ggplot2)
require(reshape2)
?melt
conc.mlt = melt(data.frame(concentrations.mat),id.vars=c('times','trial'))
conc.mlt
conc.mlt = melt(data.frame(concentrations.mat),id.vars=c('times','trial'))
g = ggplot(conc.mlt,aes(times,value,group=factor(trial),col=factor(variable)))
g = g + geom_line()
g
conc.mlt = melt(data.frame(concentrations.mat),id.vars=c('times','trial'))
g = ggplot(conc.mlt,aes(times,value,group=factor(trial),col=variable))
g = g + geom_line()
g
conc.mlt = melt(data.frame(concentrations.mat),id.vars=c('times','trial'))
g = ggplot(conc.mlt,aes(times,value,col=variable))
g = g + geom_line()
g
conc.mlt = melt(data.frame(concentrations.mat),id.vars=c('times','trial'))
g = ggplot(conc.mlt,aes(times,value,group=interaction(trial,variable),col=variable))
g = g + geom_line()
g
conc.mlt
?interaction
con = file(filename,'r') # open connection
# using scan to retrieve header info line by line
times = head(scan(con,nlines=1,sep='\t'),-1)
species = head(scan(con,nlines=1,sep='\t',what=character()),-1)
reactions = head(scan(con,nlines=1,sep='\t',what=character()),-1)
parameters = head(scan(con,nlines=1,sep='\t',what=character()),-1) # could be parsed out
ntrials = 3
concentrations.mat = matrix(nrow=ntrials*length(times),ncol=length(species)+2)
colnames(concentrations.mat) = c(species,'times','trial')
rxn_counts.mat = matrix(nrow=ntrials,ncol=length(reactions))
for (i in 1:ntrials) {
for (j in 1:length(times)) {
rdata = head(scan(con,nlines=1,sep='\t'),-1)
concentrations.mat[(i-1)*length(times) + j,] = c(rdata,times[j],i)
}
rxndata = head(scan(con,nlines=1,sep='\t'),-1)
rxn_counts.mat[i,] = rxndata
}
close(con)
require(ggplot2)
require(reshape2)
qplot(concentrations.mat[,'times'],concentrations.mat[,'x'])
conc.mlt = melt(data.frame(concentrations.mat),id.vars=c('times','trial'))
g = ggplot(conc.mlt,aes(times,value,group=interaction(trial,variable),col=variable))
g = g + geom_line()
g
qplot(melt(rxn_counts.mat),geom='bar')
melt(rxn_counts.mat)
rxn_counts.mat
rxn_counts.mat
filename = 'results/yan_network.txt'
con = file(filename,'r') # open connection
# using scan to retrieve header info line by line
times = head(scan(con,nlines=1,sep='\t'),-1)
species = head(scan(con,nlines=1,sep='\t',what=character()),-1)
reactions = head(scan(con,nlines=1,sep='\t',what=character()),-1)
parameters = head(scan(con,nlines=1,sep='\t',what=character()),-1) # could be parsed out
ntrials = 3
concentrations.mat = matrix(nrow=ntrials*length(times),ncol=length(species)+2)
colnames(concentrations.mat) = c(species,'times','trial')
rxn_counts.mat = matrix(nrow=ntrials,ncol=length(reactions))
for (i in 1:ntrials) {
for (j in 1:length(times)) {
rdata = head(scan(con,nlines=1,sep='\t'),-1)
concentrations.mat[(i-1)*length(times) + j,] = c(rdata,times[j],i)
}
rxndata = head(scan(con,nlines=1,sep='\t'),-1)
rxn_counts.mat[i,] = rxndata
}
close(con)
require(ggplot2)
require(reshape2)
qplot(concentrations.mat[,'times'],concentrations.mat[,'x'])
conc.mlt = melt(data.frame(concentrations.mat),id.vars=c('times','trial'))
g = ggplot(conc.mlt,aes(times,value,group=interaction(trial,variable),col=variable))
g = g + geom_line()
g
